
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package net.mcreator.nxroads.init;

import net.minecraftforge.registries.RegistryObject;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.DeferredRegister;

import net.minecraft.world.level.block.Block;

import net.mcreator.nxroads.block.WoodFloorLong6Block;
import net.mcreator.nxroads.block.WoodFloorLong5Block;
import net.mcreator.nxroads.block.WoodFloorLong4Block;
import net.mcreator.nxroads.block.WoodFloorLong3Block;
import net.mcreator.nxroads.block.WoodFloorLong2Block;
import net.mcreator.nxroads.block.WoodFloorLong1Block;
import net.mcreator.nxroads.block.WoodCeiling4Block;
import net.mcreator.nxroads.block.WoodCeiling3Block;
import net.mcreator.nxroads.block.WoodCeiling2Block;
import net.mcreator.nxroads.block.WoodCeiling1Block;
import net.mcreator.nxroads.block.TurnOutYellowRoadBlock;
import net.mcreator.nxroads.block.TurnOutRoadBlock;
import net.mcreator.nxroads.block.TurnOutExclYellowRoadBlock;
import net.mcreator.nxroads.block.TurnOutExRoadBlock;
import net.mcreator.nxroads.block.TurnInYellowRoadBlock;
import net.mcreator.nxroads.block.TurnInRoadBlock;
import net.mcreator.nxroads.block.TurnInExclYellowRoadBlock;
import net.mcreator.nxroads.block.TurnInExRoadBlock;
import net.mcreator.nxroads.block.StraightRightArrowYellowRoadBlock;
import net.mcreator.nxroads.block.StraightLeftRightArrowYellowRoadBlock;
import net.mcreator.nxroads.block.StraightLeftArrowYellowRoadBlock;
import net.mcreator.nxroads.block.StraightArrowYellowRoadBlock;
import net.mcreator.nxroads.block.StopLineYellowRoadBlock;
import net.mcreator.nxroads.block.StoneBrickCracked6Block;
import net.mcreator.nxroads.block.StoneBrickCracked5Block;
import net.mcreator.nxroads.block.StoneBrickCracked4Block;
import net.mcreator.nxroads.block.StoneBrickCracked3Block;
import net.mcreator.nxroads.block.StoneBrickCracked2Block;
import net.mcreator.nxroads.block.StoneBrickCracked1Block;
import net.mcreator.nxroads.block.Stone7Block;
import net.mcreator.nxroads.block.Stone6Block;
import net.mcreator.nxroads.block.Stone5Block;
import net.mcreator.nxroads.block.Stone4Block;
import net.mcreator.nxroads.block.Stone3Block;
import net.mcreator.nxroads.block.Stone2Block;
import net.mcreator.nxroads.block.Stone1Block;
import net.mcreator.nxroads.block.SplitOutRightYellowRoadBlock;
import net.mcreator.nxroads.block.SplitOutRightRoadBlock;
import net.mcreator.nxroads.block.SplitOutLeftYellowRoadBlock;
import net.mcreator.nxroads.block.SplitOutLeftRoadBlock;
import net.mcreator.nxroads.block.SplitInRightYellowRoadBlock;
import net.mcreator.nxroads.block.SplitInRightRoadBlock;
import net.mcreator.nxroads.block.SplitInLeftYellowRoadBlock;
import net.mcreator.nxroads.block.SplitInLeftRoadBlock;
import net.mcreator.nxroads.block.SkyscraperBlock1Block;
import net.mcreator.nxroads.block.SkycraperBlock6Block;
import net.mcreator.nxroads.block.SkycraperBlock5Block;
import net.mcreator.nxroads.block.SkycraperBlock4Block;
import net.mcreator.nxroads.block.SkycraperBlock3Block;
import net.mcreator.nxroads.block.SkycraperBlock2Block;
import net.mcreator.nxroads.block.SingleRightYellowX1Block;
import net.mcreator.nxroads.block.SingleRightLineX1Block;
import net.mcreator.nxroads.block.SingleMiddleLineYellowSlopeX1Block;
import net.mcreator.nxroads.block.SingleMiddleLineSlopeRoadX1Block;
import net.mcreator.nxroads.block.SingleLeftYellowX1Block;
import net.mcreator.nxroads.block.SingleLeftLineX1Block;
import net.mcreator.nxroads.block.Sidewalk8Block;
import net.mcreator.nxroads.block.Sidewalk7Block;
import net.mcreator.nxroads.block.Sidewalk6Block;
import net.mcreator.nxroads.block.Sidewalk5Block;
import net.mcreator.nxroads.block.Sidewalk4Block;
import net.mcreator.nxroads.block.Sidewalk3Block;
import net.mcreator.nxroads.block.Sidewalk2Block;
import net.mcreator.nxroads.block.Sidewalk1Block;
import net.mcreator.nxroads.block.RoadCraftingTableBlock;
import net.mcreator.nxroads.block.RightArrowYellowRoadBlock;
import net.mcreator.nxroads.block.PlainYellowRoadBlock;
import net.mcreator.nxroads.block.PlainSlopeX1Block;
import net.mcreator.nxroads.block.PlainRoadBlock;
import net.mcreator.nxroads.block.PavementCracked3Block;
import net.mcreator.nxroads.block.PavementCracked2Block;
import net.mcreator.nxroads.block.PavementCracked1Block;
import net.mcreator.nxroads.block.OuterSingleLineYellowRoadBlock;
import net.mcreator.nxroads.block.OuterLineSimpleRoadBlock;
import net.mcreator.nxroads.block.OuterLineExclYellowRoadBlock;
import net.mcreator.nxroads.block.OuterLineExRoadRotatedBlock;
import net.mcreator.nxroads.block.OuterLineExRoadBlock;
import net.mcreator.nxroads.block.MiddleTurnLineYellowRoadBlock;
import net.mcreator.nxroads.block.MiddleTurnLineSingleRoadBlock;
import net.mcreator.nxroads.block.MiddleTurnLineRoadBlock;
import net.mcreator.nxroads.block.MiddleTurnDoubleLineYellowRoadBlock;
import net.mcreator.nxroads.block.MiddleTLineYellowRoadBlock;
import net.mcreator.nxroads.block.MiddleTLineRoadBlock;
import net.mcreator.nxroads.block.MiddleSingleLineYellowRoadBlock;
import net.mcreator.nxroads.block.MiddleSingleLineX1Block;
import net.mcreator.nxroads.block.MiddleLineRoadBlock;
import net.mcreator.nxroads.block.MiddleLineDoubleRoadBlock;
import net.mcreator.nxroads.block.MiddleDoubleYellowX1Block;
import net.mcreator.nxroads.block.MiddleDoubleLineX1Block;
import net.mcreator.nxroads.block.MiddleDobbleLineYellowRoadBlock;
import net.mcreator.nxroads.block.MiddleCrossLineRoadBlock;
import net.mcreator.nxroads.block.MiddelCrossLineYellowRoadBlock;
import net.mcreator.nxroads.block.MergeLineYellowRoadBlock;
import net.mcreator.nxroads.block.MergeLineRoadBlock;
import net.mcreator.nxroads.block.Marble8Block;
import net.mcreator.nxroads.block.Marble7Block;
import net.mcreator.nxroads.block.Marble6Block;
import net.mcreator.nxroads.block.Marble5Block;
import net.mcreator.nxroads.block.Marble4Block;
import net.mcreator.nxroads.block.Marble3Block;
import net.mcreator.nxroads.block.Marble2Block;
import net.mcreator.nxroads.block.Marble1Block;
import net.mcreator.nxroads.block.LineStopRoadBlock;
import net.mcreator.nxroads.block.LeftRightArrowYellowRoadBlock;
import net.mcreator.nxroads.block.LeftArrowYellowRoadBlock;
import net.mcreator.nxroads.block.Granite3Block;
import net.mcreator.nxroads.block.Granite2Block;
import net.mcreator.nxroads.block.Granite1Block;
import net.mcreator.nxroads.block.GlassGrey9Block;
import net.mcreator.nxroads.block.GlassGrey8Block;
import net.mcreator.nxroads.block.GlassGrey7Block;
import net.mcreator.nxroads.block.GlassGrey6Block;
import net.mcreator.nxroads.block.GlassGrey5Block;
import net.mcreator.nxroads.block.GlassGrey4Block;
import net.mcreator.nxroads.block.GlassGrey3Block;
import net.mcreator.nxroads.block.GlassGrey2Block;
import net.mcreator.nxroads.block.GlassGrey1Block;
import net.mcreator.nxroads.block.GlassGrey10Block;
import net.mcreator.nxroads.block.GlassGrey0Block;
import net.mcreator.nxroads.block.GlassGreen9Block;
import net.mcreator.nxroads.block.GlassGreen8Block;
import net.mcreator.nxroads.block.GlassGreen7Block;
import net.mcreator.nxroads.block.GlassGreen6Block;
import net.mcreator.nxroads.block.GlassGreen5Block;
import net.mcreator.nxroads.block.GlassGreen4Block;
import net.mcreator.nxroads.block.GlassGreen3Block;
import net.mcreator.nxroads.block.GlassGreen2Block;
import net.mcreator.nxroads.block.GlassGreen1Block;
import net.mcreator.nxroads.block.GlassGreen10Block;
import net.mcreator.nxroads.block.GlassGreen0Block;
import net.mcreator.nxroads.block.Glass9Block;
import net.mcreator.nxroads.block.Glass8Block;
import net.mcreator.nxroads.block.Glass7Block;
import net.mcreator.nxroads.block.Glass6Block;
import net.mcreator.nxroads.block.Glass5Block;
import net.mcreator.nxroads.block.Glass4Block;
import net.mcreator.nxroads.block.Glass3Block;
import net.mcreator.nxroads.block.Glass2Block;
import net.mcreator.nxroads.block.Glass1Block;
import net.mcreator.nxroads.block.Glass10Block;
import net.mcreator.nxroads.block.ExclZoneYellowRoadBlock;
import net.mcreator.nxroads.block.ExclRightYellowX1Block;
import net.mcreator.nxroads.block.ExclRightX1Block;
import net.mcreator.nxroads.block.ExclLeftYellowX1Block;
import net.mcreator.nxroads.block.ExclLeftX1Block;
import net.mcreator.nxroads.block.ExZoneRoadBlock;
import net.mcreator.nxroads.block.DiagonalSimpleLineYellowRoadBlock;
import net.mcreator.nxroads.block.DiagonalOutExclYellowRoadBlock;
import net.mcreator.nxroads.block.DiagonalOutExRoadBlock;
import net.mcreator.nxroads.block.DiagonalLineRoadBlock;
import net.mcreator.nxroads.block.DiagonalInExclYellowRoadBlock;
import net.mcreator.nxroads.block.DiagonalInExRoadBlock;
import net.mcreator.nxroads.block.DiagonalExclOutWX1Block;
import net.mcreator.nxroads.block.DiagonalExclOutSX1Block;
import net.mcreator.nxroads.block.DiagonalExclOutNX1Block;
import net.mcreator.nxroads.block.DiagonalExclOutEX1Block;
import net.mcreator.nxroads.block.DiagonalExclInWX1Block;
import net.mcreator.nxroads.block.DiagonalExclInSX1Block;
import net.mcreator.nxroads.block.DiagonalExclInNSlopeRoadX1Block;
import net.mcreator.nxroads.block.DiagonalExclInESlopeRoadX1Block;
import net.mcreator.nxroads.block.CroswalkRoadBlock;
import net.mcreator.nxroads.block.CrosswalkYellowRoadBlock;
import net.mcreator.nxroads.block.Concrete2Block;
import net.mcreator.nxroads.block.Concrete1Block;
import net.mcreator.nxroads.block.Class0Block;
import net.mcreator.nxroads.block.ArrowStraightRoadBlock;
import net.mcreator.nxroads.block.ArrowStraightRightRoadBlock;
import net.mcreator.nxroads.block.ArrowStraightRightLeftRoadBlock;
import net.mcreator.nxroads.block.ArrowStraightLeftRoadBlock;
import net.mcreator.nxroads.block.ArrowRoadBlock;
import net.mcreator.nxroads.block.ArrowRightRoadBlock;
import net.mcreator.nxroads.block.ArrowLeftRightRoadBlock;
import net.mcreator.nxroads.NxRoadsAndSkycrapersMod;

public class NxRoadsAndSkycrapersModBlocks {
	public static final DeferredRegister<Block> REGISTRY = DeferredRegister.create(ForgeRegistries.BLOCKS, NxRoadsAndSkycrapersMod.MODID);
	public static final RegistryObject<Block> PLAIN_ROAD = REGISTRY.register("plain_road", () -> new PlainRoadBlock());
	public static final RegistryObject<Block> ARROW_ROAD = REGISTRY.register("arrow_road", () -> new ArrowRoadBlock());
	public static final RegistryObject<Block> ARROW_LEFT_RIGHT_ROAD = REGISTRY.register("arrow_left_right_road", () -> new ArrowLeftRightRoadBlock());
	public static final RegistryObject<Block> ARROW_STRAIGHT_ROAD = REGISTRY.register("arrow_straight_road", () -> new ArrowStraightRoadBlock());
	public static final RegistryObject<Block> ARROW_STRAIGHT_LEFT_ROAD = REGISTRY.register("arrow_straight_left_road", () -> new ArrowStraightLeftRoadBlock());
	public static final RegistryObject<Block> ARROW_STRAIGHT_RIGHT_LEFT_ROAD = REGISTRY.register("arrow_straight_right_left_road", () -> new ArrowStraightRightLeftRoadBlock());
	public static final RegistryObject<Block> ARROW_STRAIGHT_RIGHT_ROAD = REGISTRY.register("arrow_straight_right_road", () -> new ArrowStraightRightRoadBlock());
	public static final RegistryObject<Block> CROSWALK_ROAD = REGISTRY.register("croswalk_road", () -> new CroswalkRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_IN_EX_ROAD = REGISTRY.register("diagonal_in_ex_road", () -> new DiagonalInExRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_OUT_EX_ROAD = REGISTRY.register("diagonal_out_ex_road", () -> new DiagonalOutExRoadBlock());
	public static final RegistryObject<Block> OUTER_LINE_EX_ROAD = REGISTRY.register("outer_line_ex_road", () -> new OuterLineExRoadBlock());
	public static final RegistryObject<Block> TURN_IN_ROAD = REGISTRY.register("turn_in_road", () -> new TurnInRoadBlock());
	public static final RegistryObject<Block> OUTER_LINE_SIMPLE_ROAD = REGISTRY.register("outer_line_simple_road", () -> new OuterLineSimpleRoadBlock());
	public static final RegistryObject<Block> TURN_OUT_ROAD = REGISTRY.register("turn_out_road", () -> new TurnOutRoadBlock());
	public static final RegistryObject<Block> EX_ZONE_ROAD = REGISTRY.register("ex_zone_road", () -> new ExZoneRoadBlock());
	public static final RegistryObject<Block> TURN_IN_EX_ROAD = REGISTRY.register("turn_in_ex_road", () -> new TurnInExRoadBlock());
	public static final RegistryObject<Block> TURN_OUT_EX_ROAD = REGISTRY.register("turn_out_ex_road", () -> new TurnOutExRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_LINE_ROAD = REGISTRY.register("diagonal_line_road", () -> new DiagonalLineRoadBlock());
	public static final RegistryObject<Block> MERGE_LINE_ROAD = REGISTRY.register("merge_line_road", () -> new MergeLineRoadBlock());
	public static final RegistryObject<Block> LINE_STOP_ROAD = REGISTRY.register("line_stop_road", () -> new LineStopRoadBlock());
	public static final RegistryObject<Block> MIDDLE_LINE_DOUBLE_ROAD = REGISTRY.register("middle_line_double_road", () -> new MiddleLineDoubleRoadBlock());
	public static final RegistryObject<Block> MIDDLE_TURN_LINE_ROAD = REGISTRY.register("middle_turn_line_road", () -> new MiddleTurnLineRoadBlock());
	public static final RegistryObject<Block> MIDDLE_LINE_ROAD = REGISTRY.register("middle_line_road", () -> new MiddleLineRoadBlock());
	public static final RegistryObject<Block> MIDDLE_CROSS_LINE_ROAD = REGISTRY.register("middle_cross_line_road", () -> new MiddleCrossLineRoadBlock());
	public static final RegistryObject<Block> MIDDLE_T_LINE_ROAD = REGISTRY.register("middle_t_line_road", () -> new MiddleTLineRoadBlock());
	public static final RegistryObject<Block> MIDDLE_TURN_LINE_SINGLE_ROAD = REGISTRY.register("middle_turn_line_single_road", () -> new MiddleTurnLineSingleRoadBlock());
	public static final RegistryObject<Block> SPLIT_IN_LEFT_ROAD = REGISTRY.register("split_in_left_road", () -> new SplitInLeftRoadBlock());
	public static final RegistryObject<Block> SPLIT_IN_RIGHT_ROAD = REGISTRY.register("split_in_right_road", () -> new SplitInRightRoadBlock());
	public static final RegistryObject<Block> SPLIT_OUT_LEFT_ROAD = REGISTRY.register("split_out_left_road", () -> new SplitOutLeftRoadBlock());
	public static final RegistryObject<Block> SPLIT_OUT_RIGHT_ROAD = REGISTRY.register("split_out_right_road", () -> new SplitOutRightRoadBlock());
	public static final RegistryObject<Block> ARROW_RIGHT_ROAD = REGISTRY.register("arrow_right_road", () -> new ArrowRightRoadBlock());
	public static final RegistryObject<Block> PLAIN_SLOPE_X_1 = REGISTRY.register("plain_slope_x_1", () -> new PlainSlopeX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_IN_E_SLOPE_ROAD_X_1 = REGISTRY.register("diagonal_excl_in_e_slope_road_x_1", () -> new DiagonalExclInESlopeRoadX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_IN_N_SLOPE_ROAD_X_1 = REGISTRY.register("diagonal_excl_in_n_slope_road_x_1", () -> new DiagonalExclInNSlopeRoadX1Block());
	public static final RegistryObject<Block> SINGLE_MIDDLE_LINE_SLOPE_ROAD_X_1 = REGISTRY.register("single_middle_line_slope_road_x_1", () -> new SingleMiddleLineSlopeRoadX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_IN_SX_1 = REGISTRY.register("diagonal_excl_in_sx_1", () -> new DiagonalExclInSX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_IN_WX_1 = REGISTRY.register("diagonal_excl_in_wx_1", () -> new DiagonalExclInWX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_OUT_EX_1 = REGISTRY.register("diagonal_excl_out_ex_1", () -> new DiagonalExclOutEX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_OUT_NX_1 = REGISTRY.register("diagonal_excl_out_nx_1", () -> new DiagonalExclOutNX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_OUT_SX_1 = REGISTRY.register("diagonal_excl_out_sx_1", () -> new DiagonalExclOutSX1Block());
	public static final RegistryObject<Block> DIAGONAL_EXCL_OUT_WX_1 = REGISTRY.register("diagonal_excl_out_wx_1", () -> new DiagonalExclOutWX1Block());
	public static final RegistryObject<Block> EXCL_LEFT_X_1 = REGISTRY.register("excl_left_x_1", () -> new ExclLeftX1Block());
	public static final RegistryObject<Block> EXCL_RIGHT_X_1 = REGISTRY.register("excl_right_x_1", () -> new ExclRightX1Block());
	public static final RegistryObject<Block> MIDDLE_DOUBLE_LINE_X_1 = REGISTRY.register("middle_double_line_x_1", () -> new MiddleDoubleLineX1Block());
	public static final RegistryObject<Block> SINGLE_LEFT_LINE_X_1 = REGISTRY.register("single_left_line_x_1", () -> new SingleLeftLineX1Block());
	public static final RegistryObject<Block> SINGLE_RIGHT_LINE_X_1 = REGISTRY.register("single_right_line_x_1", () -> new SingleRightLineX1Block());
	public static final RegistryObject<Block> MIDDLE_SINGLE_LINE_X_1 = REGISTRY.register("middle_single_line_x_1", () -> new MiddleSingleLineX1Block());
	public static final RegistryObject<Block> PLAIN_YELLOW_ROAD = REGISTRY.register("plain_yellow_road", () -> new PlainYellowRoadBlock());
	public static final RegistryObject<Block> LEFT_ARROW_YELLOW_ROAD = REGISTRY.register("left_arrow_yellow_road", () -> new LeftArrowYellowRoadBlock());
	public static final RegistryObject<Block> RIGHT_ARROW_YELLOW_ROAD = REGISTRY.register("right_arrow_yellow_road", () -> new RightArrowYellowRoadBlock());
	public static final RegistryObject<Block> LEFT_RIGHT_ARROW_YELLOW_ROAD = REGISTRY.register("left_right_arrow_yellow_road", () -> new LeftRightArrowYellowRoadBlock());
	public static final RegistryObject<Block> STRAIGHT_ARROW_YELLOW_ROAD = REGISTRY.register("straight_arrow_yellow_road", () -> new StraightArrowYellowRoadBlock());
	public static final RegistryObject<Block> STRAIGHT_LEFT_ARROW_YELLOW_ROAD = REGISTRY.register("straight_left_arrow_yellow_road", () -> new StraightLeftArrowYellowRoadBlock());
	public static final RegistryObject<Block> STRAIGHT_RIGHT_ARROW_YELLOW_ROAD = REGISTRY.register("straight_right_arrow_yellow_road", () -> new StraightRightArrowYellowRoadBlock());
	public static final RegistryObject<Block> STRAIGHT_LEFT_RIGHT_ARROW_YELLOW_ROAD = REGISTRY.register("straight_left_right_arrow_yellow_road", () -> new StraightLeftRightArrowYellowRoadBlock());
	public static final RegistryObject<Block> CROSSWALK_YELLOW_ROAD = REGISTRY.register("crosswalk_yellow_road", () -> new CrosswalkYellowRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_IN_EXCL_YELLOW_ROAD = REGISTRY.register("diagonal_in_excl_yellow_road", () -> new DiagonalInExclYellowRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_OUT_EXCL_YELLOW_ROAD = REGISTRY.register("diagonal_out_excl_yellow_road", () -> new DiagonalOutExclYellowRoadBlock());
	public static final RegistryObject<Block> OUTER_LINE_EXCL_YELLOW_ROAD = REGISTRY.register("outer_line_excl_yellow_road", () -> new OuterLineExclYellowRoadBlock());
	public static final RegistryObject<Block> TURN_IN_YELLOW_ROAD = REGISTRY.register("turn_in_yellow_road", () -> new TurnInYellowRoadBlock());
	public static final RegistryObject<Block> OUTER_SINGLE_LINE_YELLOW_ROAD = REGISTRY.register("outer_single_line_yellow_road", () -> new OuterSingleLineYellowRoadBlock());
	public static final RegistryObject<Block> TURN_OUT_YELLOW_ROAD = REGISTRY.register("turn_out_yellow_road", () -> new TurnOutYellowRoadBlock());
	public static final RegistryObject<Block> EXCL_ZONE_YELLOW_ROAD = REGISTRY.register("excl_zone_yellow_road", () -> new ExclZoneYellowRoadBlock());
	public static final RegistryObject<Block> TURN_IN_EXCL_YELLOW_ROAD = REGISTRY.register("turn_in_excl_yellow_road", () -> new TurnInExclYellowRoadBlock());
	public static final RegistryObject<Block> TURN_OUT_EXCL_YELLOW_ROAD = REGISTRY.register("turn_out_excl_yellow_road", () -> new TurnOutExclYellowRoadBlock());
	public static final RegistryObject<Block> DIAGONAL_SIMPLE_LINE_YELLOW_ROAD = REGISTRY.register("diagonal_simple_line_yellow_road", () -> new DiagonalSimpleLineYellowRoadBlock());
	public static final RegistryObject<Block> MERGE_LINE_YELLOW_ROAD = REGISTRY.register("merge_line_yellow_road", () -> new MergeLineYellowRoadBlock());
	public static final RegistryObject<Block> STOP_LINE_YELLOW_ROAD = REGISTRY.register("stop_line_yellow_road", () -> new StopLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDLE_DOBBLE_LINE_YELLOW_ROAD = REGISTRY.register("middle_dobble_line_yellow_road", () -> new MiddleDobbleLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDLE_TURN_DOUBLE_LINE_YELLOW_ROAD = REGISTRY.register("middle_turn_double_line_yellow_road", () -> new MiddleTurnDoubleLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDLE_SINGLE_LINE_YELLOW_ROAD = REGISTRY.register("middle_single_line_yellow_road", () -> new MiddleSingleLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDEL_CROSS_LINE_YELLOW_ROAD = REGISTRY.register("middel_cross_line_yellow_road", () -> new MiddelCrossLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDLE_T_LINE_YELLOW_ROAD = REGISTRY.register("middle_t_line_yellow_road", () -> new MiddleTLineYellowRoadBlock());
	public static final RegistryObject<Block> MIDDLE_TURN_LINE_YELLOW_ROAD = REGISTRY.register("middle_turn_line_yellow_road", () -> new MiddleTurnLineYellowRoadBlock());
	public static final RegistryObject<Block> SPLIT_IN_RIGHT_YELLOW_ROAD = REGISTRY.register("split_in_right_yellow_road", () -> new SplitInRightYellowRoadBlock());
	public static final RegistryObject<Block> SPLIT_IN_LEFT_YELLOW_ROAD = REGISTRY.register("split_in_left_yellow_road", () -> new SplitInLeftYellowRoadBlock());
	public static final RegistryObject<Block> SPLIT_OUT_RIGHT_YELLOW_ROAD = REGISTRY.register("split_out_right_yellow_road", () -> new SplitOutRightYellowRoadBlock());
	public static final RegistryObject<Block> SPLIT_OUT_LEFT_YELLOW_ROAD = REGISTRY.register("split_out_left_yellow_road", () -> new SplitOutLeftYellowRoadBlock());
	public static final RegistryObject<Block> SINGLE_MIDDLE_LINE_YELLOW_SLOPE_X_1 = REGISTRY.register("single_middle_line_yellow_slope_x_1", () -> new SingleMiddleLineYellowSlopeX1Block());
	public static final RegistryObject<Block> EXCL_LEFT_YELLOW_X_1 = REGISTRY.register("excl_left_yellow_x_1", () -> new ExclLeftYellowX1Block());
	public static final RegistryObject<Block> EXCL_RIGHT_YELLOW_X_1 = REGISTRY.register("excl_right_yellow_x_1", () -> new ExclRightYellowX1Block());
	public static final RegistryObject<Block> MIDDLE_DOUBLE_YELLOW_X_1 = REGISTRY.register("middle_double_yellow_x_1", () -> new MiddleDoubleYellowX1Block());
	public static final RegistryObject<Block> SINGLE_LEFT_YELLOW_X_1 = REGISTRY.register("single_left_yellow_x_1", () -> new SingleLeftYellowX1Block());
	public static final RegistryObject<Block> SINGLE_RIGHT_YELLOW_X_1 = REGISTRY.register("single_right_yellow_x_1", () -> new SingleRightYellowX1Block());
	public static final RegistryObject<Block> ROAD_CRAFTING_TABLE = REGISTRY.register("road_crafting_table", () -> new RoadCraftingTableBlock());
	public static final RegistryObject<Block> SKYSCRAPER_BLOCK_1 = REGISTRY.register("skyscraper_block_1", () -> new SkyscraperBlock1Block());
	public static final RegistryObject<Block> SKYCRAPER_BLOCK_2 = REGISTRY.register("skycraper_block_2", () -> new SkycraperBlock2Block());
	public static final RegistryObject<Block> SKYCRAPER_BLOCK_3 = REGISTRY.register("skycraper_block_3", () -> new SkycraperBlock3Block());
	public static final RegistryObject<Block> SKYCRAPER_BLOCK_4 = REGISTRY.register("skycraper_block_4", () -> new SkycraperBlock4Block());
	public static final RegistryObject<Block> SKYCRAPER_BLOCK_5 = REGISTRY.register("skycraper_block_5", () -> new SkycraperBlock5Block());
	public static final RegistryObject<Block> SKYCRAPER_BLOCK_6 = REGISTRY.register("skycraper_block_6", () -> new SkycraperBlock6Block());
	public static final RegistryObject<Block> CONCRETE_1 = REGISTRY.register("concrete_1", () -> new Concrete1Block());
	public static final RegistryObject<Block> CONCRETE_2 = REGISTRY.register("concrete_2", () -> new Concrete2Block());
	public static final RegistryObject<Block> GRANITE_1 = REGISTRY.register("granite_1", () -> new Granite1Block());
	public static final RegistryObject<Block> GRANITE_2 = REGISTRY.register("granite_2", () -> new Granite2Block());
	public static final RegistryObject<Block> GRANITE_3 = REGISTRY.register("granite_3", () -> new Granite3Block());
	public static final RegistryObject<Block> MARBLE_1 = REGISTRY.register("marble_1", () -> new Marble1Block());
	public static final RegistryObject<Block> MARBLE_2 = REGISTRY.register("marble_2", () -> new Marble2Block());
	public static final RegistryObject<Block> MARBLE_3 = REGISTRY.register("marble_3", () -> new Marble3Block());
	public static final RegistryObject<Block> MARBLE_4 = REGISTRY.register("marble_4", () -> new Marble4Block());
	public static final RegistryObject<Block> MARBLE_5 = REGISTRY.register("marble_5", () -> new Marble5Block());
	public static final RegistryObject<Block> MARBLE_6 = REGISTRY.register("marble_6", () -> new Marble6Block());
	public static final RegistryObject<Block> MARBLE_7 = REGISTRY.register("marble_7", () -> new Marble7Block());
	public static final RegistryObject<Block> MARBLE_8 = REGISTRY.register("marble_8", () -> new Marble8Block());
	public static final RegistryObject<Block> PAVEMENT_CRACKED_1 = REGISTRY.register("pavement_cracked_1", () -> new PavementCracked1Block());
	public static final RegistryObject<Block> PAVEMENT_CRACKED_2 = REGISTRY.register("pavement_cracked_2", () -> new PavementCracked2Block());
	public static final RegistryObject<Block> PAVEMENT_CRACKED_3 = REGISTRY.register("pavement_cracked_3", () -> new PavementCracked3Block());
	public static final RegistryObject<Block> SIDEWALK_1 = REGISTRY.register("sidewalk_1", () -> new Sidewalk1Block());
	public static final RegistryObject<Block> SIDEWALK_2 = REGISTRY.register("sidewalk_2", () -> new Sidewalk2Block());
	public static final RegistryObject<Block> SIDEWALK_3 = REGISTRY.register("sidewalk_3", () -> new Sidewalk3Block());
	public static final RegistryObject<Block> SIDEWALK_4 = REGISTRY.register("sidewalk_4", () -> new Sidewalk4Block());
	public static final RegistryObject<Block> SIDEWALK_5 = REGISTRY.register("sidewalk_5", () -> new Sidewalk5Block());
	public static final RegistryObject<Block> SIDEWALK_6 = REGISTRY.register("sidewalk_6", () -> new Sidewalk6Block());
	public static final RegistryObject<Block> SIDEWALK_7 = REGISTRY.register("sidewalk_7", () -> new Sidewalk7Block());
	public static final RegistryObject<Block> SIDEWALK_8 = REGISTRY.register("sidewalk_8", () -> new Sidewalk8Block());
	public static final RegistryObject<Block> STONE_1 = REGISTRY.register("stone_1", () -> new Stone1Block());
	public static final RegistryObject<Block> STONE_2 = REGISTRY.register("stone_2", () -> new Stone2Block());
	public static final RegistryObject<Block> STONE_3 = REGISTRY.register("stone_3", () -> new Stone3Block());
	public static final RegistryObject<Block> STONE_4 = REGISTRY.register("stone_4", () -> new Stone4Block());
	public static final RegistryObject<Block> STONE_5 = REGISTRY.register("stone_5", () -> new Stone5Block());
	public static final RegistryObject<Block> STONE_6 = REGISTRY.register("stone_6", () -> new Stone6Block());
	public static final RegistryObject<Block> STONE_7 = REGISTRY.register("stone_7", () -> new Stone7Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_1 = REGISTRY.register("stone_brick_cracked_1", () -> new StoneBrickCracked1Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_2 = REGISTRY.register("stone_brick_cracked_2", () -> new StoneBrickCracked2Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_3 = REGISTRY.register("stone_brick_cracked_3", () -> new StoneBrickCracked3Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_4 = REGISTRY.register("stone_brick_cracked_4", () -> new StoneBrickCracked4Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_5 = REGISTRY.register("stone_brick_cracked_5", () -> new StoneBrickCracked5Block());
	public static final RegistryObject<Block> STONE_BRICK_CRACKED_6 = REGISTRY.register("stone_brick_cracked_6", () -> new StoneBrickCracked6Block());
	public static final RegistryObject<Block> WOOD_CEILING_1 = REGISTRY.register("wood_ceiling_1", () -> new WoodCeiling1Block());
	public static final RegistryObject<Block> WOOD_CEILING_2 = REGISTRY.register("wood_ceiling_2", () -> new WoodCeiling2Block());
	public static final RegistryObject<Block> WOOD_CEILING_3 = REGISTRY.register("wood_ceiling_3", () -> new WoodCeiling3Block());
	public static final RegistryObject<Block> WOOD_CEILING_4 = REGISTRY.register("wood_ceiling_4", () -> new WoodCeiling4Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_1 = REGISTRY.register("wood_floor_long_1", () -> new WoodFloorLong1Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_2 = REGISTRY.register("wood_floor_long_2", () -> new WoodFloorLong2Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_3 = REGISTRY.register("wood_floor_long_3", () -> new WoodFloorLong3Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_4 = REGISTRY.register("wood_floor_long_4", () -> new WoodFloorLong4Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_5 = REGISTRY.register("wood_floor_long_5", () -> new WoodFloorLong5Block());
	public static final RegistryObject<Block> WOOD_FLOOR_LONG_6 = REGISTRY.register("wood_floor_long_6", () -> new WoodFloorLong6Block());
	public static final RegistryObject<Block> CLASS_0 = REGISTRY.register("class_0", () -> new Class0Block());
	public static final RegistryObject<Block> GLASS_1 = REGISTRY.register("glass_1", () -> new Glass1Block());
	public static final RegistryObject<Block> GLASS_2 = REGISTRY.register("glass_2", () -> new Glass2Block());
	public static final RegistryObject<Block> GLASS_3 = REGISTRY.register("glass_3", () -> new Glass3Block());
	public static final RegistryObject<Block> GLASS_4 = REGISTRY.register("glass_4", () -> new Glass4Block());
	public static final RegistryObject<Block> GLASS_5 = REGISTRY.register("glass_5", () -> new Glass5Block());
	public static final RegistryObject<Block> GLASS_6 = REGISTRY.register("glass_6", () -> new Glass6Block());
	public static final RegistryObject<Block> GLASS_7 = REGISTRY.register("glass_7", () -> new Glass7Block());
	public static final RegistryObject<Block> GLASS_8 = REGISTRY.register("glass_8", () -> new Glass8Block());
	public static final RegistryObject<Block> GLASS_9 = REGISTRY.register("glass_9", () -> new Glass9Block());
	public static final RegistryObject<Block> GLASS_10 = REGISTRY.register("glass_10", () -> new Glass10Block());
	public static final RegistryObject<Block> GLASS_GREY_0 = REGISTRY.register("glass_grey_0", () -> new GlassGrey0Block());
	public static final RegistryObject<Block> GLASS_GREY_1 = REGISTRY.register("glass_grey_1", () -> new GlassGrey1Block());
	public static final RegistryObject<Block> GLASS_GREY_2 = REGISTRY.register("glass_grey_2", () -> new GlassGrey2Block());
	public static final RegistryObject<Block> GLASS_GREY_3 = REGISTRY.register("glass_grey_3", () -> new GlassGrey3Block());
	public static final RegistryObject<Block> GLASS_GREY_4 = REGISTRY.register("glass_grey_4", () -> new GlassGrey4Block());
	public static final RegistryObject<Block> GLASS_GREY_5 = REGISTRY.register("glass_grey_5", () -> new GlassGrey5Block());
	public static final RegistryObject<Block> GLASS_GREY_6 = REGISTRY.register("glass_grey_6", () -> new GlassGrey6Block());
	public static final RegistryObject<Block> GLASS_GREY_7 = REGISTRY.register("glass_grey_7", () -> new GlassGrey7Block());
	public static final RegistryObject<Block> GLASS_GREY_8 = REGISTRY.register("glass_grey_8", () -> new GlassGrey8Block());
	public static final RegistryObject<Block> GLASS_GREY_9 = REGISTRY.register("glass_grey_9", () -> new GlassGrey9Block());
	public static final RegistryObject<Block> GLASS_GREY_10 = REGISTRY.register("glass_grey_10", () -> new GlassGrey10Block());
	public static final RegistryObject<Block> GLASS_GREEN_0 = REGISTRY.register("glass_green_0", () -> new GlassGreen0Block());
	public static final RegistryObject<Block> GLASS_GREEN_1 = REGISTRY.register("glass_green_1", () -> new GlassGreen1Block());
	public static final RegistryObject<Block> GLASS_GREEN_2 = REGISTRY.register("glass_green_2", () -> new GlassGreen2Block());
	public static final RegistryObject<Block> GLASS_GREEN_3 = REGISTRY.register("glass_green_3", () -> new GlassGreen3Block());
	public static final RegistryObject<Block> GLASS_GREEN_4 = REGISTRY.register("glass_green_4", () -> new GlassGreen4Block());
	public static final RegistryObject<Block> GLASS_GREEN_5 = REGISTRY.register("glass_green_5", () -> new GlassGreen5Block());
	public static final RegistryObject<Block> GLASS_GREEN_6 = REGISTRY.register("glass_green_6", () -> new GlassGreen6Block());
	public static final RegistryObject<Block> GLASS_GREEN_7 = REGISTRY.register("glass_green_7", () -> new GlassGreen7Block());
	public static final RegistryObject<Block> GLASS_GREEN_8 = REGISTRY.register("glass_green_8", () -> new GlassGreen8Block());
	public static final RegistryObject<Block> GLASS_GREEN_9 = REGISTRY.register("glass_green_9", () -> new GlassGreen9Block());
	public static final RegistryObject<Block> GLASS_GREEN_10 = REGISTRY.register("glass_green_10", () -> new GlassGreen10Block());
	public static final RegistryObject<Block> OUTER_LINE_EX_ROAD_ROTATED = REGISTRY.register("outer_line_ex_road_rotated", () -> new OuterLineExRoadRotatedBlock());
	// Start of user code block custom blocks
	// End of user code block custom blocks
}
